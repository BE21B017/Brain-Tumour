#!unzip "/content/drive/MyDrive/Medical Data/brain-tumor.zip" -d "/content/drive/MyDrive/Medical Data"
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Display the Image Data
from PIL import Image
import cv2
import os

normal_image = Image.open('/content/drive/MyDrive/Medical Data/brain_tumor/brain_tumor/no/1 no.jpeg')
tumor_image = Image.open('/content/drive/MyDrive/Medical Data/brain_tumor/brain_tumor/yes/Y1.jpg')
# subplotting image data
# subplotting image data
fig = plt.figure(figsize = (15,9))
ax1 = fig.add_subplot(1, 2, 1)
img_plot = plt.imshow(normal_image, cmap = plt.cm.bone)
ax1.set_title("Normal MRI Scan")

ax2 = fig.add_subplot(1, 2, 2)
img_plot = plt.imshow(tumor_image, cmap = plt.cm.bone)
ax2.set_title("Tumor MRI Scan")
plt.show()

# subplotting image data
# subplotting image data
fig = plt.figure(figsize = (15,9))
ax1 = fig.add_subplot(1, 2, 1)
img_plot = plt.imshow(normal_image, cmap = plt.cm.bone)
ax1.set_title("Normal MRI Scan")

ax2 = fig.add_subplot(1, 2, 2)
img_plot = plt.imshow(tumor_image, cmap = plt.cm.bone)
ax2.set_title("Tumor MRI Scan")
plt.show()

import os
yes = os.listdir("/content/drive/MyDrive/Medical Data/brain_tumor/yes/")
no = os.listdir("/content/drive/MyDrive/Medical Data/brain_tumor/no/")

data = np.concatenate([yes, no])
display(data)

target_yes = np.full(len(yes), 1)
target_no = np.full(len(no), 0)

data_target = np.concatenate([target_yes, target_no])
display(data_target)

img = cv2.imread("/content/drive/MyDrive/Medical Data/brain_tumor/yes/Y1.jpg")
mri = cv2.resize(img, (32,32))
plt.imshow(mri)

# cv2 - It reads image data in B, G, R Format
b, g, r = cv2.split(mri)
img = cv2.merge([r, g, b])
plt.imshow(img)

X_data = []
yes = os.listdir("/content/drive/MyDrive/Medical Data/brain_tumor/yes/")
for file in yes:
    img = cv2.imread("/content/drive/MyDrive/Medical Data/brain_tumor/yes/" + file)
    # resizing image data to 32 x 32
    mri = cv2.resize(img, (32,32))
    # cv2 - It reads image data in B, G, R Format
    b, g, r = cv2.split(mri)
    img = cv2.merge([r, g, b])
    X_data.append(img)            # This will store list of all image data in an array

no = os.listdir("/content/drive/MyDrive/Medical Data/brain_tumor/no/")
for file in no:
    img = cv2.imread("/content/drive/MyDrive/Medical Data/brain_tumor/no/" + file)
    # resizing image data to 32 x 32
    mri = cv2.resize(img, (32,32))
    # cv2 - It reads image data in B, G, R Format
    b, g, r = cv2.split(mri)
    img = cv2.merge([r, g, b])
    X_data.append(img)            # This will store list of all image data in an array

X = np.array(X_data)
X.shape

X = X.astype('float32')
X /= 255

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, data_target, test_size = 0.1, random_state = 3)

x_train2, x_val, y_train2, y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state = 3)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, GlobalAveragePooling2D, Flatten, Dropout, Dense, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications import VGG16

def build_model():
    # Use ImageNet = pre-trained model weights called as knowledge transfer
    # image shape = 32x32x3
    vgg16_model = VGG16(weights = 'imagenet', include_top = False, input_shape=(32,32,3))

    # Input Layer
    model = Sequential()
    # padding = 'same'
    model.add(Conv2D(filters = 3, kernel_size=(3,3), padding='same', input_shape=(32,32,3)))

    # add transfer learning layer
    model.add(vgg16_model)

    # Average Pooling Layer
    model.add(GlobalAveragePooling2D())
    model.add(BatchNormalization())
    model.add(Dropout(0.5))

    # Fully Connected Layer
    model.add(Dense(units = 512, activation='relu'))
    model.add(Dropout(0.5))
    # Output Layer
    model.add(Dense(units = 1, activation='sigmoid'))

    # Model compile
    model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

    return model

model = build_model()

model.summary()

from tensorflow.keras import callbacks
filepath = "/content/drive/MyDrive/MRIVGG16.hdf5"
checkpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', save_best_only=True, mode = 'min', verbose = 1)
checkpoint

import datetime
from tensorflow import keras
logdir = os.path.join("/content/drive/MyDrive/mri_logs", datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = keras.callbacks.TensorBoard(logdir)

history = model.fit(x_train2, y_train2, epochs = 200, batch_size=32, shuffle=True, validation_data=(x_val, y_val),
                    callbacks = [checkpoint, tensorboard_callback], verbose = 1)
model.load_weights("/content/drive/MyDrive/MRIVGG16.hdf5")

%load_ext tensorboard

%tensorboard --logdir "/content/drive/MyDrive/mri_logs"

model.evaluate(x_test, y_test)

predictions = model.predict(x_test)

yhat = np.round(predictions)

from sklearn.metrics import confusion_matrix, classification_report
confusion_matrix(y_test, yhat)

print(classification_report(y_test, yhat))

x_new_sample = np.reshape(x_val[0], (1, 32, 32, 3))

np.round(model.predict(x_new_sample))

labels = ["Yes", "No"]
y_hat = model.predict(x_test)


# Plot A random sample of 15 test datasets, their predicted labels and actual o/p
figure = plt.figure(figsize = (20,8))
# randomly selecting 15 test samples
for i, index in enumerate(np.random.choice(x_test.shape[0], size = 15, replace=False)):
  ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])
  # display test image using plt
  ax.imshow(np.squeeze(x_test[index]))
  # Predicted o/p
  predicted_index = np.argmax(y_hat[index])
  # actual value
  true_index = np.argmax(y_test[index])
  ax.set_title("{} ({})".format(labels[predicted_index], 
                                  labels[true_index]),
                                  color=("green" if predicted_index == true_index else "red"))
plt.show
